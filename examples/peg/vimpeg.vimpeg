% VimPEG grammar {{{
.skip_white = true
.skip_all = false
.string_option = 'abc'
.other_string_option = "def"
.numeric_option = 3 % a comment
.float_option = 2.5
<line>             ::= ( <option> | <definition> )? <comment>? -> Line
<definition>       ::= <label> <mallet> <expression> <callback>? -> Definition
<expression>       ::= <sequence> ( <or> <sequence> )* -> Expression
<sequence>         ::= <prefix>* -> Sequence
<prefix>           ::= <not>? <suffix> -> Prefix
<suffix>           ::= <primary> ( <question> | <star> | <plus> )? -> Suffix
<primary>          ::= <label> !<mallet> | <open> <expression> <close> | <regex> -> Primary
<callback>         ::= <right_arrow> '\h\%([a-zA-Z0-9_:.#]*\w\+\)\?' -> Callback
<option>           ::= <dot> <option_name> <equal> <option_value> -> Option
<option_name>      ::= <identifier>
<option_value>     ::= <squoted_string> | <squoted_string> | <number> | <boolean>
<label>            ::= <lt> <identifier> <gt> -> Label
<identifier>       ::= '\h\w*' -> Identifier
<regex>            ::= <dquoted_string> | <squoted_string> -> Regex
<dquoted_string>   ::= <dquote> ( <double_backslash> | <escaped_dquote> | '[^"]' )* <dquote> -> Dquoted_string
<squoted_string>   ::= <squote> ( "[^']" | <double_squote> )* <squote> -> Squoted_string
<escaped_dquote>   ::= <backslash> <dquote>
<double_backslash> ::= <backslash> <backslash>
<backslash>        ::= '\'
<number>           ::= '\%(0\|[1-9]\d*\)\%(\.\d\+\)\?'
<dquote>           ::= '"'
<double_squote>    ::= "''"
<squote>           ::= "'"
<comment>          ::= '%.*$'
<right_arrow>      ::= '->'
<mallet>           ::= '::=' % End of line
<boolean>          ::= <true> | <false>
<true>             ::= 'true\|on' -> True
<false>            ::= 'false\|off' -> False
<equal>            ::= '='
<or>               ::= '|'
<not>              ::= '!'
<question>         ::= '?'
<star>             ::= '\*'
<plus>             ::= '+'
<close>            ::= ')'
<open>             ::= '('
% whole line
<dot>              ::= '\.'
<gt>               ::= '>'
<lt>               ::= '<'
% }}}

